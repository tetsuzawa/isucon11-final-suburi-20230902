server {
  listen 443 ssl http2;
  server_name  "";
  
  ssl_certificate /etc/nginx/certificates/tls-cert.pem;
  ssl_certificate_key /etc/nginx/certificates/tls-key.pem;

  send_timeout 180;
  proxy_connect_timeout 600;
  proxy_read_timeout    600;
  proxy_send_timeout    600;


}

# 複数serverへ proxy
upstream app {
    server 192.100.0.1:5000 weight=2; # weight をつけるとproxyする量を変更可能。defaultは1。多いほどたくさんrequestを振り分ける。
    server 192.100.0.2:5000;
    server 192.100.0.3:5000;
    # keepalive 60; #app server への connection を keepalive する。app が対応できるならした方が良い。
}

lua_package_path "/path/to/lua-resty-cookie/lib/?.lua;;";

server {
    # ===================================== trace_id =====================================
    set $trace_id '';
    access_by_lua_block {
        local cookie = require "resty.cookie"
        local uuid = require "resty.jit-uuid"

        local ck = cookie:new()
        local trace_id, err = ck:get("trace_id")

        if not (trace_id) or (trace_id == "") then
            trace_id = uuid.generate_v4()
            local ok, err = ck:set({
                key = "trace_id",
                value = trace_id,
                path = "/",
                httponly = true,
                secure = false, -- set to true if you want to enforce HTTPS
                max_age = 3600 -- cookie expiration in seconds, adjust as you see fit
            })

            if not ok then
                ngx.log(ngx.ERR, err)
                return
            end
        end

        ngx.var.trace_id = trace_id
    }


  # TLS の設定
  listen 443 default ssl;
  # server_name example.jp;  # オレオレ証明書だと指定しなくても動いた
  ssl on;
  ssl_certificate /etc/nginx/certificates/tls-cert.pem;
  ssl_certificate_key /etc/nginx/certificates/tls-key.pem;

  # SSL Sesssion Cache
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 1m;  # cacheする時間。1mは1分。

  send_timeout 180;
  proxy_connect_timeout 600;
  proxy_read_timeout    600;
  proxy_send_timeout    600;

  location /login {
    proxy_pass   http://127.0.0.1:7000;
    # proxy_http_version 1.1;          # app server との connection を keepalive するなら追加
    # proxy_set_header Connection "";  # app server との connection を keepalive するなら追加
  }

  location /logout {
    proxy_pass   http://127.0.0.1:7000;
  }

  location /initialize {
    proxy_pass   http://127.0.0.1:7000;
  }

  location /api {
    proxy_pass   http://127.0.0.1:7000;
  }
            
  # static file の配信用の root
  root /home/isucon/webapp/frontend/dist;

  location ~ .*\.(htm|html|css|js|jpg|png|gif|ico) {
    expires 24h;
    add_header Cache-Control public;
  }

  location / {
    root /home/isucon/webapp/frontend/dist;
    index index.html;
    try_files $uri $uri/index.html /index.html;
  }

}
